<meta name="viewport" content="user-scalable=no,width=device-width,height=device-height" />
<style>
img { max-width: 100%; max-height: 100%; }
</style>
<h3><i>1.Немного об Ассемблере</i><hr></h3>
<p>Интересно проследить, начиная со&nbsp;времени появления первых компьютеров и&nbsp;заканчивая сегодняшним днем, за&nbsp;трансформациями представлений о&nbsp;языке ассемблера у&nbsp;программистов.<br />
<nobr>Когда-то</nobr> ассемблер был языком, без знания которого нельзя было заставить компьютер сделать <nobr>что-либо</nobr> полезное. Постепенно ситуация менялась. Появлялись более удобные средства общения с&nbsp;компьютером. Но, в&nbsp;отличие от&nbsp;других языков, ассемблер не&nbsp;умирал, более того он&nbsp;не&nbsp;мог сделать этого в&nbsp;принципе. Почему? В&nbsp;поисках ответа попытаемся понять, что такое язык ассемблера вообще.</p>
<p>Если коротко, то&nbsp;язык ассемблера&nbsp;&mdash; это символическое представление машинного языка.<br />
Все процессы в&nbsp;машине на&nbsp;самом низком, аппаратном уровне приводятся в&nbsp;действие только командами (инструкциями) машинного языка. Отсюда понятно, что, несмотря на&nbsp;общее название, язык ассемблера для каждого типа компьютера свой. Это касается и&nbsp;внешнего вида программ, написанных на&nbsp;ассемблере, и&nbsp;идей, отражением которых этот язык является.</p>
<p><nobr>По-настоящему</nobr> решить проблемы, связанные с&nbsp;аппаратурой (или даже, более того, зависящие от&nbsp;аппаратуры как, к&nbsp;примеру, повышение быстродействия программы), невозможно без знания ассемблера.</p>
<p>Программист или любой другой пользователь может использовать любые высокоуровневые средства, вплоть до&nbsp;программ построения виртуальных миров и, возможно, даже не&nbsp;подозревать, что на&nbsp;самом деле компьютер выполняет не&nbsp;команды языка, на&nbsp;котором написана его программа, а&nbsp;их&nbsp;трансформированное представление в&nbsp;форме скучной и&nbsp;унылой последовательности команд совсем другого языка&nbsp;&mdash; машинного. А&nbsp;теперь представим, что у&nbsp;такого пользователя возникла нестандартная проблема или просто <nobr>что-то</nobr> не&nbsp;заладилось. К&nbsp;примеру, его программа должна работать с&nbsp;некоторым необычным устройством или выполнять другие действия, требующие знания принципов работы аппаратуры компьютера. И&nbsp;вот <nobr>здесь-то</nobr> и&nbsp;начинается совсем другая история&hellip;. Каким&nbsp;бы умным ни&nbsp;был программист, каким&nbsp;бы хорошим ни&nbsp;был язык, на&nbsp;котором он&nbsp;написал свою чудную программу, без знания ассемблера ему не&nbsp;обойтись. И&nbsp;не&nbsp;случайно практически все компиляторы языков высокого уровня содержат средства связи своих модулей с&nbsp;модулями на&nbsp;ассемблере либо поддерживают выход на&nbsp;ассемблерный уровень программирования.</p>
<p>Конечно, время компьютерных универсалов уже прошло. Как говорится нельзя объять необъятное. Но&nbsp;есть нечто общее, своего рода фундамент, на&nbsp;котором строится любое <nobr>сколь-нибудь</nobr> серьезное компьютерное образование. Это знания о&nbsp;принципах работы компьютера, его архитектуре и&nbsp;языке ассемблера как отражении и&nbsp;воплощении этих знаний.</p>
<p>Типичный современный компьютер (на&nbsp;базе i486 или Pentium) состоит из&nbsp;следующих компонентов (рис.&nbsp;1).</p>
<img src="file:///android_res/raw/ris1_1.gif height="100%">
<p><i><b>Рис.&nbsp;1.</b> Компьютер и&nbsp;периферийные устройства</i></p>
<p>Из&nbsp;рисунка видно, что компьютер составлен из&nbsp;нескольких физических устройств, каждое из&nbsp;которых подключено к&nbsp;одному блоку, называемому системным. Если рассуждать логически, то&nbsp;ясно, что он&nbsp;играет роль некоторого координирующего устройства. Давайте заглянем внутрь системного блока (не&nbsp;нужно пытаться проникнуть внутрь монитора&nbsp;&mdash; там нет ничего интересного, к&nbsp;тому&nbsp;же это опасно): открываем корпус и&nbsp;видим <nobr>какие-то</nobr> платы, блоки, соединительные провода. Чтобы понять их&nbsp;функциональное назначение, посмотрим на&nbsp;структурную схему типичного компьютера (рис.&nbsp;2). Она не&nbsp;претендует на&nbsp;безусловную точность и&nbsp;имеет целью лишь показать назначение, взаимосвязь и&nbsp;типовой состав элементов современного персонального компьютера.</p>
<img src="file:///android_res/raw/ris1_2.gif">
<p><i><b>Рис.&nbsp;2.</b> Структурная схема персонального компьютера</i></p>
<p>Обсудим схему на&nbsp;рис.&nbsp;2 в&nbsp;несколько нетрадиционном стиле.<br />
Человеку свойственно, встречаясь с&nbsp;<nobr>чем-то</nobr> новым, искать <nobr>какие-то</nobr> ассоциации, которые могут помочь ему познать неизвестное. Какие ассоциации вызывает компьютер? У&nbsp;меня, к&nbsp;примеру, компьютер часто ассоциируется с&nbsp;самим человеком. Почему?</p>
<p>У&nbsp;компьютера есть органы восприятия информации из&nbsp;внешнего мира&nbsp;&mdash; это клавиатура, мышь, накопители на&nbsp;магнитных дисках. На&nbsp;рис.&nbsp;2 эти органы расположены справа от&nbsp;системных шин.<br />
У&nbsp;компьютера есть органы &laquo;переваривающие&raquo; полученную информацию&nbsp;&mdash; это центральный процессор и&nbsp;оперативная память.<br />
И, наконец, у&nbsp;компьютера есть органы речи, выдающие результаты переработки. Это также некоторые из&nbsp;устройств справа.</p>
<p>Современным компьютерам, конечно, далеко до&nbsp;человека. Их&nbsp;можно сравнить с&nbsp;существами, взаимодействующими с&nbsp;внешним миром на&nbsp;уровне большого, но&nbsp;ограниченного набора безусловных рефлексов.<br />
Этот набор рефлексов образует систему машинных команд. На&nbsp;каком&nbsp;бы высоком уровне вы&nbsp;не&nbsp;общались с&nbsp;компьютером, в&nbsp;конечном итоге все сводится к&nbsp;скучной и&nbsp;однообразной последовательности машинных команд.<br />
Каждая машинная команда является своего рода раздражителем для возбуждения того или иного безусловного рефлекса. Реакция на&nbsp;этот раздражитель всегда однозначная и&nbsp;&laquo;зашита&raquo; в&nbsp;блоке микрокоманд в&nbsp;виде микропрограммы. Эта микропрограмма и&nbsp;реализует действия по&nbsp;реализации машинной команды, но&nbsp;уже на&nbsp;уровне сигналов, подаваемых на&nbsp;те&nbsp;или иные логические схемы компьютера, тем самым управляя различными подсистемами компьютера. В&nbsp;этом состоит так называемый принцип микропрограммного управления.</p>
<p>Продолжая аналогию с&nbsp;человеком, отметим: для того, чтобы компьютер правильно питался, придумано множество операционных систем, компиляторов сотен языков программирования <nobr>и т. д.</nobr> Но&nbsp;все они являются, по&nbsp;сути, лишь блюдом, на&nbsp;котором по&nbsp;определенным правилам доставляется пища (программы) желудку (компьютеру). Только (вот досада!) желудок компьютера любит диетическую, однообразную пищу&nbsp;&mdash; подавай ему информацию структурированную, в&nbsp;виде строго организованных последовательностей нулей и&nbsp;единиц, комбинации которых и&nbsp;составляют машинный язык.</p>
<p>Таким образом, внешне являясь полиглотом, компьютер понимает только один язык&nbsp;&mdash; язык машинных команд. Конечно, для общения и&nbsp;работы с&nbsp;компьютером, необязательно знать этот язык, но&nbsp;практически любой профессиональный программист рано или поздно сталкивается с&nbsp;необходимостью его изучения. К&nbsp;счастью, программисту не&nbsp;нужно пытаться постичь значение различных комбинаций двоичных чисел, так как еще в&nbsp;<nobr>50-е</nobr> годы программисты стали использовать для программирования символический аналог машинного языка, который назвали языком ассемблера. Этот язык точно отражает все особенности машинного языка. Именно поэтому, в&nbsp;отличие от&nbsp;языков высокого уровня, язык ассемблера для каждого типа компьютера свой.</p>
<p>Из&nbsp;всего вышесказанного можно сделать вывод, что, так как язык ассемблера для компьютера &laquo;родной&raquo;, то&nbsp;и&nbsp;самая эффективная программа может быть написана только на&nbsp;нем (при условии, что ее&nbsp;пишет квалифицированный программист). Здесь есть одно маленькое &laquo;но&raquo;: это очень трудоемкий, требующий большого внимания и&nbsp;практического опыта процесс. Поэтому реально на&nbsp;ассемблере пишут в&nbsp;основном программы, которые должны обеспечить эффективную работу с&nbsp;аппаратной частью. Иногда на&nbsp;ассемблере пишутся критичные по&nbsp;времени выполнения или расходованию памяти участки программы. Впоследствии они оформляются в&nbsp;виде подпрограмм и&nbsp;совмещаются с&nbsp;кодом на&nbsp;языке высокого уровня.</p>
